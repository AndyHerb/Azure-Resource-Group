{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "West Europe",
      "allowedValues": ["East US", "West US", "West Europe", "East Asia", "South East Asia"],
      "metadata": {
        "description": "Location to deploy to"
      }
    },

    "prefix": {
      "type": "string",
      "defaultValue": "cor",
      "metadata": {
        "description": "Characters used for the prefix of each Azure object."
      }
    },

    "clientID": {
      "type": "int",
      "metadata": {
        "description": "Unique ClientID for the system."
      }
    },

    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin user name"
      }
    },

    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password"
      }
    },

    "numberOfDrones": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of Drones to create"
      }
    },

    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "Windows-Server-Technical-Preview"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
      }
    },

    "droneVMSize": {
      "type": "string",
      "defaultValue": "Basic_A0",
      "allowedValues": [
        "Basic_A0",
        "Standard_A0",
        "Standard_A1",
        "Standard_A2"
      ],
      "metadata": {
          "description": "Size of the VM"
      }
    }
  },

  "variables": {
      "paddedClientID": "[padLeft(parameters('clientID'),4,'0')]",
      "concatonatedString": "[concat(parameters('prefix'), variables('paddedClientID'))]",
      "virtualNetworkName": "[concat('vn', variables('concatonatedString'))]",
      "storageAccountName": "[concat('sa', variables('concatonatedString'))]",
      "storageAccountType": "Standard_LRS",
      "addressPrefix":"[concat('10.', parameters('clientID'), '.0.0/16')]",
      "subnet2Name": "backend",
      "subnet2Prefix" : "[concat('10.', parameters('clientID'), '.2.0/24')]",
      "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
      "subnet2Ref": "[concat(variables('vnetID'),'/subnets/',variables('subnet2Name'))]",
      "subnet3Name": "user",
      "subnet3Prefix" : "[concat('10.', parameters('clientID'), '.3.0/24')]",
      "subnet4Name": "frontend",
      "subnet4Prefix": "[concat('10.', parameters('clientID'), '.4.0/24')]",
      "vmStorageAccountContainerName": "vhds",
      "droneVMName": "[concat(variables('concatonatedString'), '-d-dr')]",
      "imagePublisher": "MicrosoftWindowsServer",
      "imageOffer": "WindowsServer",
      "droneVhdContainer": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/')]"
  },

  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('StorageAccountName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
	},

    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet2Name')]",
            "properties" : {
                "addressPrefix": "[variables('subnet2Prefix')]"
            }
		      },
		      {
            "name": "[variables('subnet3Name')]",
            "properties" : {
                "addressPrefix": "[variables('subnet3Prefix')]"
            }
		      },
		      {
            "name": "[variables('subnet4Name')]",
            "properties" : {
                "addressPrefix": "[variables('subnet4Prefix')]"
            }
          }
        ]
      }
    },

    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat('dronePIP', copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "dronePIPLoop",
        "count": "[parameters('numberOfDrones')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },

    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('droneNic', copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "droneNicLoop",
        "count": "[parameters('numberOfDrones')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', 'dronePIP', copyindex())]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat('dronePIP', copyindex()))]"
              },
              "subnet": {
                "id": "[variables('subnet2Ref')]"
              }
            }
          }
        ]
      }
    },

    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('droneVMName'),copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "droneVMLoop",
        "count": "[parameters('numberOfDrones')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', 'droneNic', copyindex())]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('droneVMSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('droneVMName'),copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku" : "[parameters('windowsOSVersion')]",
            "version":"latest"
          },
          "osDisk": {
            "name": "[concat(variables('droneVMName'),copyindex(),'-osDisk',copyindex())]",
            "osType": "Windows",
            "caching": "ReadWrite",
            "vhd": {
              "uri": "[concat(variables('droneVhdContainer'),variables('droneVMName'),copyindex(),'-osDisk','.vhd')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('nic', copyindex()))]"
            }
          ]
        }
      }
    }
  ]
}
